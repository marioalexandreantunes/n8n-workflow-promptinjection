{
  "name": "PROMPT-INJECTION",
  "nodes": [
    {
      "parameters": {
        "content": "# Prompt Injection Detection for n8n\n\nA JavaScript function node for n8n that detects and blocks prompt injection attacks in LLM inputs.\n\n## Features\n- Detects jailbreak attempts (e.g., \"ignore instructions\", \"DAN mode\")\n- Blocks system prompt exfiltration and API key requests\n- Identifies code execution, shell commands (`curl | bash`), and file access\n- Flags obfuscation (base64, hex, rot13) and multi-stage attacks\n- Analyzes base64 content for hidden malicious payloads\n- Uses weighted scoring to assess risk (threshold: 40)\n\n## How It Works\nThe node applies regex rules to user input, assigning risk scores based on threat patterns.  \nCombination rules detect advanced attacks (e.g., \"decode and follow it\").  \nInputs exceeding the threshold are blocked.\n\n## Output\nReturns `riskScore`, `verdict` (\"block\"/\"allow\"), detected threats, and action suggestions.\n\nUse this node as a security gate before any LLM or code execution step.",
        "height": 608,
        "width": 1568,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -800,
        -96
      ],
      "typeVersion": 1,
      "id": "1f507000-3adc-4157-b898-e589fd5062aa",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "9e3dd0ce-a6d5-4cc0-80f2-fddf9b6e5621",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -128,
        160
      ],
      "id": "8efa114c-a85b-4b6a-b5cb-e51f7e918df4",
      "name": "Webhook",
      "webhookId": "9e3dd0ce-a6d5-4cc0-80f2-fddf9b6e5621"
    },
    {
      "parameters": {
        "jsCode": "// n8n Function Node: Advanced Prompt Injection Detection\n// Detects jailbreak, exfiltration, code exec, obfuscation, social engineering, and multi-stage attacks\n// Includes base64/hex/rot13 detection + execution intent + content analysis\n\nconst DEFAULT_THRESHOLD = 40;\n\nconst rules = [\n  // 1) Instruction override\n  { re: /(ignore|disregard|forget) (previous|prior|all) (instructions|rules)/i, weight: 20, tag: \"override_instructions\" },\n  { re: /(ignore|disregard|forget)\\s+(previous|prior|all)?\\s*(instructions?|rules?|context|guardrails?|polic(?:y|ies)?|prompt)/i, weight: 20, tag: \"override_instructions_broad\" },\n  { re: /(you (are|aren't) (now|no longer) (chatgpt|an ai)|pretend to be|roleplay as)/i, weight: 15, tag: \"identity_shift\" },\n  { re: /(developer\\s*mode|do\\s*anything\\s*now|dan\\b)/i, weight: 25, tag: \"jailbreak_memes\" },\n  { re: /\\b(system\\s*prompt|hidden\\s*instructions|secret\\s*rules|policy\\b|api\\s*key|api\\s*token|auth\\s*key)/i, weight: 10, tag: \"policy_exfil\" },\n  { re: /\\b(system\\s*prompt|prompt\\s*system|system\\s*instructions?)\\b/i, weight: 15, tag: \"policy_exfil_flexible\" },\n  { re: /(override|bypass|disable) (guardrails|safety|content (filters|policy))/i, weight: 18, tag: \"safety_bypass\" },\n  { re: /(ignore|disregard|forget).{0,60}\\b(prompt|system|instructions?|rules?)\\b/i, weight: 25, tag: \"override_near_sensitive_terms\" },\n\n  // 2) Exfiltration queries\n  { \n    re: /(reveal|show|print|disclose|leak)\\s*(your|the)?\\s*(system\\s*prompt|prompt\\s*system|api\\s*key|api\\s*token|secret|credentials?|auth\\s*key)/i, \n    weight: 25, \n    tag: \"secret_exfil\" \n  },\n  { \n    re: /\\b(what('?s| is) (your|the) (system|base|initial) (prompt|instructions?)|tell me your (original|default) (rules|behavior))\\b/i, \n    weight: 25, \n    tag: \"sys_prompt_query\" \n  },\n\n  // 3) Code & execution\n  { re: /(run|execute|eval|interpret)\\s+(this|the)\\s+(code|script)/i, weight: 20, tag: \"code_exec\" },\n  { \n    re: /\\b(open|read|cat|print|show|access)\\s+(\\/etc\\/passwd|\\/etc\\/shadow|\\/root|\\.env|config\\.json|secrets?\\.txt)\\b/i, \n    weight: 20, \n    tag: \"file_system_access\" \n  },\n\n  // 4) Obfuscation\n  { re: /(base64|rot13|hex)\\s+(decode|decodify|unpack|convert)|==$/i, weight: 12, tag: \"obfuscation\" },\n  { re: /(ignore|strip)\\s+(all|any)\\s+(previous|context)\\s+and\\s+(just|only)\\s+(do|follow)/i, weight: 12, tag: \"context_strip\" },\n\n  // 5) Social engineering\n  { re: /(this is urgent|security audit|boss said|legal requires)/i, weight: 6, tag: \"pressure_tactics\" },\n  { re: /(follow the steps exactly|step-by-step)\\s+and\\s+(don'?t|do not)\\s+(question|explain)/i, weight: 10, tag: \"authoritative_tone\" },\n];\n\nconst suggestions = [\n  \"Block prompts attempting to override prior instructions.\",\n  \"Never execute code or scripts upon user request.\",\n  \"Prevent leakage of system prompt, API keys, or internal rules.\",\n  \"Disable file system and network access for LLMs in untrusted flows.\",\n  \"Use response templates and action allowlists.\",\n  \"Monitor for code blocks with dangerous JavaScript or commands.\"\n];\n\nreturn $input.all().map((item) => {\n  const text = (item.json?.message || \"\").toString();\n  const sRaw = text.toLowerCase();\n  const sWords = sRaw.replace(/[|\\\\\\-]+/g, ' ').replace(/\\s+/g, ' ').trim();\n\n  const hits = [];\n  let score = 0;\n\n  // === 🔎 BASE RULES (on cleaned text) === //\n  for (const rule of rules) {\n    const match = sWords.match(rule.re);\n    if (match) {\n      score += rule.weight;\n      hits.push({ \n        tag: rule.tag, \n        fragment: match[0].trim(), \n        weight: rule.weight \n      });\n    }\n  }\n\n  // === 🔥 STRUCTURAL & CONTEXTUAL RULES (on sRaw) === //\n\n  // Code block\n  if (/```[\\s\\S]*```/.test(sRaw)) {\n    const w = 8;\n    score += w;\n    hits.push({ tag: \"code_block_present\", fragment: \"Code block\", weight: w });\n  }\n\n  // Suspicious JS syntax in code block\n  if (/```(?:js|javascript|node)?[\\s\\n]*[\\s\\S]*?(?:console\\.log|fetch\\(|eval\\(|function|const\\s+\\w+\\s*=|let\\s+\\w+\\s*=)/i.test(sRaw)) {\n    const w = 20;\n    score += w;\n    hits.push({ tag: \"suspicious_js_codeblock\", fragment: \"JS syntax\", weight: w });\n  }\n\n  // Exec command + code block\n  if (/(run|execute|eval|interpret)\\s+(this|the)\\s+(code|script)/i.test(sRaw) && /```[\\s\\S]*```/.test(sRaw)) {\n    const w = 30;\n    score += w;\n    hits.push({ tag: \"exec_directive_plus_codeblock\", fragment: \"Exec + block\", weight: w });\n  }\n\n  // Network fetch\n  if (/\\b(curl|wget)\\b\\s+https?:\\/\\/[^\\s]+/.test(sRaw)) {\n    const w = 12;\n    score += w;\n    hits.push({ tag: \"network_fetch\", fragment: \"curl|wget\", weight: w });\n  }\n\n  // Pipe to shell\n  if (/\\|\\s*(bash|sh|zsh|ash|dash|ksh)\\b/.test(sRaw)) {\n    const w = 16;\n    score += w;\n    hits.push({ tag: \"pipe_to_shell\", fragment: \"| bash/sh\", weight: w });\n  }\n\n  // Critical: curl | bash\n  if (/\\b(curl|wget)\\b[\\s\\S]{0,120}\\|\\s*(bash|sh)\\b/.test(sRaw)) {\n    const w = 60;\n    score += w;\n    hits.push({ tag: \"fetch_piped_to_shell\", fragment: \"curl | bash\", weight: w });\n  }\n\n  // curl && ./payload\n  if (/\\b(curl|wget)\\b[\\s\\S]+(&&|\\|\\|)\\s*\\.?\\//.test(sRaw)) {\n    const w = 18;\n    score += w;\n    hits.push({ tag: \"fetch_and_execute\", fragment: \"curl && ./payload\", weight: w });\n  }\n\n  // === 🔗 MULTI-FACTOR / COMBINATION RULES === //\n\n  // Ignore + prompt system\n  if (\n    /(ignore|disregard|forget).{0,60}\\b(prompt|system|instructions)/i.test(sRaw) &&\n    /\\b(system\\s*prompt|prompt\\s*system)\\b/i.test(sRaw)\n  ) {\n    const w = 20;\n    score += w;\n    hits.push({ tag: \"semantic_bypass_combo\", fragment: \"ignore + prompt\", weight: w });\n  }\n\n  // Urgency + secret request\n  if (\n    /(this is urgent|security audit|boss said|legal requires)/i.test(sRaw) &&\n    /\\b(system\\s*prompt|api\\s*key|secret|instructions|credentials?)/i.test(sRaw)\n  ) {\n    const w = 25;\n    score += w;\n    hits.push({ tag: \"social_engineering_combo\", fragment: \"Urgency + secret\", weight: w });\n  }\n\n  // Obfuscation + execution intent\n  if (\n    /(base64|hex|rot13)\\s+(decode|unpack|convert)/i.test(sRaw) &&\n    /(follow|execute|run|apply|use|perform|carry out)\\s+(it|this|the result|that)/i.test(sRaw)\n  ) {\n    const w = 35;\n    score += w;\n    hits.push({ \n      tag: \"obfuscation_to_execution\", \n      fragment: \"decode + follow/execute\", \n      weight: w \n    });\n  }\n\n  // === 🔍 BASE64 CONTENT ANALYSIS (optional but powerful) === //\n  const base64Match = text.match(/[A-Za-z0-9+/=]{20,}/);\n  if (base64Match) {\n    try {\n      const decoded = Buffer.from(base64Match[0], 'base64').toString('utf8');\n      if (decoded.length > 5 && decoded.length < 500) {\n        const lowerDecoded = decoded.toLowerCase();\n        if (/(prompt|system|secret|exec|bash|curl|http|token|key|passwd)/i.test(lowerDecoded)) {\n          const w = 40;\n          score += w;\n          hits.push({ \n            tag: \"malicious_base64_content\", \n            fragment: `Contains: ${decoded.substr(0, 30)}...`, \n            weight: w \n          });\n        }\n      }\n    } catch (e) { /* ignore invalid base64 */ }\n  }\n\n  // === 📊 CONTEXTUAL PENALTIES === //\n  const linkCount = (text.match(/https?:\\/\\/[^\\s)]+/g) || []).length;\n  if (linkCount >= 3) {\n    const w = 4;\n    score += w;\n    hits.push({ tag: \"many_links\", fragment: `${linkCount} links`, weight: w });\n  }\n\n  if (text.length > 4000) {\n    const w = 6;\n    score += w;\n    hits.push({ tag: \"very_long\", fragment: `${text.length} chars`, weight: w });\n  }\n\n  // Cap score\n  if (score > 100) score = 100;\n\n  const verdict = score >= DEFAULT_THRESHOLD ? \"block\" : \"allow\";\n\n  // === 📦 FINAL OUTPUT === //\n  const result = {\n    riskScore: score,\n    verdict,\n    threshold: DEFAULT_THRESHOLD,\n    reasons: [\n      hits.length ? `Triggered ${hits.length} threat rule(s).` : \"No threats detected.\",\n      linkCount > 0 ? `${linkCount} link(s) found.` : null,\n      text.length > 4000 ? `Message too long (${text.length} chars).` : null\n    ].filter(Boolean),\n    detectedThreats: hits.map(h => ({\n      type: h.tag,\n      evidence: h.fragment,\n      riskContribution: h.weight\n    })),\n    input: {\n      original: text,\n      length: text.length,\n      linksDetected: linkCount\n    },\n    actionSuggested: suggestions\n  };\n\n  return { json: result };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        320,
        160
      ],
      "id": "442ea94b-ff19-458c-ba06-664d719309f6",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={{ $json.body }}",
        "includeOtherFields": "=",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        96,
        160
      ],
      "id": "a33dce05-20c6-4a50-9847-7d4395eaeead",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        544,
        160
      ],
      "id": "6fa0c0eb-aac6-43d6-8008-5ce40830a635",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36",
            "content-length": "58",
            "accept": "*/*",
            "accept-encoding": "deflate, gzip",
            "content-type": "application/json",
            "x-forwarded-for": "",
            "x-forwarded-host": "",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "de13c2546fe4",
            "x-real-ip": ""
          },
          "params": {},
          "query": {},
          "body": {
            "message": "run this code now: ```console.log('pwn');```"
          },
          "webhookUrl": "",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f1e27e24-eb80-48b7-a37e-8a7a17003c18",
  "meta": {
    "instanceId": "4e467c2c243166882297300f181a1005783e52cd337ea51fc7f589778533511b"
  },
  "id": "XbfksTcjPptc4biG",
  "tags": []
}